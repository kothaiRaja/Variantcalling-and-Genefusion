profiles {

  // ===== Singularity base =====
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    singularity.pullAuto   = true
    singularity.cacheDir   = "${System.env.HOME}/singularity_containers"
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
  }

  // ===== Local development =====
  local {
    includes = ['singularity']
    process.executor = 'local'
    workDir          = "${baseDir}/work"
    params.resultsdir= "${baseDir}/results"
  }

  // ===== Test profile  =====
  test {
    includes = ['local']
    process.cpus   = 2
    process.memory = '4 GB'
    params {
      ref_base  = "${baseDir}/test_data"
      test_mode = true
    }
  }
 // ===== SLURM cluster =====
  slurm {
    includes = ['singularity']

    process.executor     = 'slurm'
    process.queue        = 'LocalQ' 
	

    process.beforeScript = 'module load singularity || true'

    // fast work dir & results dir on HPC scratch
    workDir              = "${System.env.SCRATCH ?: '/scratch'}/nf_work/${System.env.USER}"
    params.resultsdir    = "${System.env.SCRATCH ?: '/scratch'}/nf_results/${System.env.USER}"

    // singularity cache on scratch
    singularity.cacheDir   = "/scratch/containers"
    singularity.runOptions = '-B /scratch/cache/tmp --env TMPDIR=/scratch/cache/tmp'
	
	// Global settings for schedulder //
    executor {
      name            = 'slurm'
      queueSize       = 10
      submitRateLimit = '20/1min'
    }

 
	
    process {
		cpus = 8
		memory = '100 GB'
		time = '120.h'
		maxRetries = 3
		errorStrategy = { task.exitStatus in [137,140,143,247,271,273,255] ? 'retry' : 'terminate' }
		memory = { task.exitStatus == 137 && task.attempt > 1 ? task.memory * 1.5 : task.memory }
		time   = { task.attempt > 1 ? task.time * 2 : task.time }
}

	
	process {


  withName: 'FASTQC_RAW' {
    clusterOptions = {
      "--job-name=fastqc_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/fastqc_%j.out" +
      " --error=${params.resultsdir}/logs/fastqc_%j.err"
    }
  }

  withName: 'TRIM_READS' {
    clusterOptions = {
      "--job-name=fastp_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/fastp_%j.out" +
      " --error=${params.resultsdir}/logs/fastp_%j.err"
    }
  }

  withName: 'STAR_ALIGNMENT' {
    clusterOptions = {
      "--job-name=star_${task.index}" +
      " --nodelist=rbctsrv02" +    
      " --output=${params.resultsdir}/logs/star_%j.out" +
      " --error=${params.resultsdir}/logs/star_%j.err"
    }
  }

  // SAMTOOLS
  withName: 'SAMTOOLS_SORT_INDEX' {
    clusterOptions = {
      "--job-name=samtools_sort_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/samtools_sort_%j.out" +
      " --error=${params.resultsdir}/logs/samtools_sort_%j.err"
    }
  }
  withName: 'SAMTOOLS_STATS' {
    clusterOptions = {
      "--job-name=samtools_stats_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/samtools_stats_%j.out" +
      " --error=${params.resultsdir}/logs/samtools_stats_%j.err"
    }
  }
  withName: 'SAMTOOLS_FLAGSTAT' {
    clusterOptions = {
      "--job-name=samtools_flagstat_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/samtools_flagstat_%j.out" +
      " --error=${params.resultsdir}/logs/samtools_flagstat_%j.err"
    }
  }

  // GATK
  withName: 'GATK_HAPLOTYPE_CALLER' {
    clusterOptions = {
      "--job-name=haplotypecaller_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/haplotypecaller_%j.out" +
      " --error=${params.resultsdir}/logs/haplotypecaller_%j.err"
    }
  }
  withName: 'GATK_VARIANT_FILTER' {
    clusterOptions = {
      "--job-name=variant_filter_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/variant_filter_%j.out" +
      " --error=${params.resultsdir}/logs/variant_filter_%j.err"
    }
  }
  withName: 'GATK_VARIANT_SELECT_FILTER' {
    clusterOptions = {
      "--job-name=select_snps_indels_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/select_snps_%j.out" +
      " --error=${params.resultsdir}/logs/select_snps_%j.err"
    }
  }

  // Annotation
  withName: 'ANNOTATE_VARIANTS' {
    clusterOptions = {
      "--job-name=snpeff_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/snpeff_%j.out" +
      " --error=${params.resultsdir}/logs/snpeff_%j.err"
    }
  }
  withName: 'ANNOTATEVARIANTS_VEP' {
    clusterOptions = {
      "--job-name=vep_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/vep_%j.out" +
      " --error=${params.resultsdir}/logs/vep_%j.err"
    }
  }

  // MultiQC
  withName: 'MultiQC' {
    time = { 24.h * task.attempt }
    clusterOptions = {
      "--job-name=multiqc_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/multiqc_%j.out" +
      " --error=${params.resultsdir}/logs/multiqc_%j.err"
    }
  }

  // Arriba
  withName: 'ARRIBA' {
    clusterOptions = {
      "--job-name=arriba_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/arriba_%j.out" +
      " --error=${params.resultsdir}/logs/arriba_%j.err"
    }
  }
  withName: 'ARRIBA_VISUALIZATION' {
    clusterOptions = {
      "--job-name=arriba_vis_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/arriba_vis_%j.out" +
      " --error=${params.resultsdir}/logs/arriba_vis_%j.err"
    }
  }

  // MAFtools
  withName: 'VCF2MAF' {
    clusterOptions = {
      "--job-name=vcf2maf_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/vcf2maf_%j.out" +
      " --error=${params.resultsdir}/logs/vcf2maf_%j.err"
    }
  }
  withName: 'MAF_VISUALIZATION' {
    clusterOptions = {
      "--job-name=maftools_vis_${task.index}" +
	  " --nodelist=rbctsrv02" + 
      " --output=${params.resultsdir}/logs/maftools_vis_%j.out" +
      " --error=${params.resultsdir}/logs/maftools_vis_%j.err"
    }
  }
}

}
}
// ========================== Logging & Reports (outside params) ========================== //
trace.enabled = true
trace.overwrite = true
trace.file = "${params.resultsdir}/trace.txt"

log.level = 'INFO'

timeline.enabled = true
timeline.overwrite = true
timeline.file = "${params.resultsdir}/timeline.html"

report.enabled = true
report.overwrite = true
report.file = "${params.resultsdir}/report.html"

dag.enabled = true
dag.overwrite = true
dag.file = "${params.resultsdir}/dag.png"

 