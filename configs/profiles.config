profiles {

  // ===== Singularity base =====
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    singularity.pullAuto   = true
    singularity.cacheDir   = "${System.env.HOME}/singularity_containers"
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
  }

  // ===== Local development =====
  local {
    includes = ['singularity']
    process.executor = 'local'
    workDir          = "${baseDir}/work"
    params.resultsdir= "${baseDir}/results"
  }

  // ===== Test profile  =====
  test {
    includes = ['local']
    process.cpus   = 2
    process.memory = '4 GB'
    params {
      ref_base  = "${baseDir}/test_data"
      test_mode = true
    }
  }
 // ===== SLURM cluster =====
  slurm {
    includes = ['singularity']

    process.executor     = 'slurm'
    process.queue        = 'LocalQ'    

    process.beforeScript = 'module load singularity || true'

    // fast work dir & results dir on HPC scratch
    workDir              = "${System.env.SCRATCH ?: '/scratch'}/nf_work/${System.env.USER}"
    params.resultsdir    = "${System.env.SCRATCH ?: '/scratch'}/nf_results/${System.env.USER}"

    // singularity cache on scratch
    singularity.cacheDir   = "${System.env.SCRATCH ?: '/scratch'}/singularity_cache"
    singularity.runOptions = "-B /tmp --env TMPDIR=/tmp"
	
	// Global settings for schedulder //
    executor {
      name            = 'slurm'
      queueSize       = 50
      submitRateLimit = '20/1min'
    }

    // Global safety net for SLURM tasks //
	
    process {
		cpus = 2
		memory = '4 GB'
		time = '4h'
		maxRetries = 3
		errorStrategy = { task.exitStatus in [137,140,143,247,271,273,255] ? 'retry' : 'terminate' }
		memory = { task.exitStatus == 137 && task.attempt > 1 ? task.memory * 1.5 : task.memory }
		time   = { task.attempt > 1 ? task.time * 2 : task.time }
}

	
	process {

  withName: 'FASTQC_RAW' {
    clusterOptions = "--job-name=fastqc --output=${params.resultsdir}/logs/fastqc-%j.out --error=${params.resultsdir}/logs/fastqc-%j.err"
  }

  withName: 'TRIM_READS' {
    clusterOptions = "--job-name=fastp --output=${params.resultsdir}/logs/fastp-%j.out --error=${params.resultsdir}/logs/fastp-%j.err"
  }

  withName: 'STAR_ALIGNMENT' {
    clusterOptions = "--job-name=star --output=${params.resultsdir}/logs/star-%j.out --error=${params.resultsdir}/logs/star-%j.err"
  }

  // SAMTOOLS 
  withName: 'SAMTOOLS_SORT_INDEX'      { clusterOptions = "--job-name=samtools_sort --output=${params.resultsdir}/logs/samtools_sort-%j.out --error=${params.resultsdir}/logs/samtools_sort-%j.err" }
  withName: 'SAMTOOLS_STATS'     { clusterOptions = "--job-name=samtools_stats --output=${params.resultsdir}/logs/samtools_stats-%j.out --error=${params.resultsdir}/logs/samtools_stats-%j.err" }
  withName: 'SAMTOOLS_FLAGSTAT'  { clusterOptions = "--job-name=samtools_flagstat --output=${params.resultsdir}/logs/samtools_flagstat-%j.out --error=${params.resultsdir}/logs/samtools_flagstat-%j.err" }

  // GATK 
  withName: 'GATK_HAPLOTYPE_CALLER' { clusterOptions = "--job-name=haplotypecaller --output=${params.resultsdir}/logs/haplotypecaller-%j.out --error=${params.resultsdir}/logs/haplotypecaller-%j.err" }
  withName: 'GATK_VARIANT_FILTER'  { clusterOptions = "--job-name=variant_filter --output=${params.resultsdir}/logs/variant_filter-%j.out --error=${params.resultsdir}/logs/variant_filter-%j.err" }
  withName: 'GATK_VCF_SELECT_SNP'  { clusterOptions = "--job-name=select_snps --output=${params.resultsdir}/logs/select_snps-%j.out --error=${params.resultsdir}/logs/select_snps-%j.err" }
  withName: 'GATK_VCF_SELECT_INDEL'{ clusterOptions = "--job-name=select_indels --output=${params.resultsdir}/logs/select_indels-%j.out --error=${params.resultsdir}/logs/select_indels-%j.err" }

  // Annotation
  withName: 'ANNOTATE_VARIANTS' { clusterOptions = "--job-name=snpeff --output=${params.resultsdir}/logs/snpeff-%j.out --error=${params.resultsdir}/logs/snpeff-%j.err" }
  withName: 'ANNOTATEVARIANTS_VEP'    { clusterOptions = "--job-name=vep --output=${params.resultsdir}/logs/vep-%j.out --error=${params.resultsdir}/logs/vep-%j.err" }

  // MultiQC
  withName: 'MultiQC' { clusterOptions = "--job-name=multiqc --output=${params.resultsdir}/logs/multiqc-%j.out --error=${params.resultsdir}/logs/multiqc-%j.err" }

  // Arriba
  withName: 'ARRIBA'               { clusterOptions = "--job-name=arriba --output=${params.resultsdir}/logs/arriba-%j.out --error=${params.resultsdir}/logs/arriba-%j.err" }
  withName: 'ARRIBA_VISUALIZATION' { clusterOptions = "--job-name=arriba_vis --output=${params.resultsdir}/logs/arriba_vis-%j.out --error=${params.resultsdir}/logs/arriba_vis-%j.err" }

  // MAFtools
  withName: 'VCF2MAF'            { clusterOptions = "--job-name=vcf2maf --output=${params.resultsdir}/logs/vcf2maf-%j.out --error=${params.resultsdir}/logs/vcf2maf-%j.err" }
  withName: 'MAF_VISUALIZATION'  { clusterOptions = "--job-name=maftools_vis --output=${params.resultsdir}/logs/maftools_vis-%j.out --error=${params.resultsdir}/logs/maftools_vis-%j.err" }
}

  }

}



 