// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// modules.config
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Configuration for per-process settings (e.g., publishDir, ext.args)
// Used with DSL2-style modular pipelines for overriding defaults.

process {
    publishDir = [
        path: { "${params.resultsdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename == 'versions.yml' ? null : filename }
    ]
}

// === FASTQC ===
process {
    withName: 'FASTQC' {
        label = 'fastqc_process'
        publishDir = [
            path: params.fastqc_outdir,
            mode: 'copy'
        ]
    }
}

// === FASTP ===
process {
    withName: TRIM_READS {
        label = 'fastp_process'
        ext.args = params.fastp_extra
        publishDir = [
            path: { "${params.trim_reads_outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fastq.gz"
        ]
    }
}

// === STAR ALIGNMENT ===
process {
    withName: STAR_ALIGNMENT {
        label = 'star_process'
        ext.args = [
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            "--sjdbOverhang ${params.read_length}",
            "--alignIntronMin ${params.star_alignIntronMin}",
            "--alignIntronMax ${params.star_alignIntronMax}",
            "--alignSJoverhangMin ${params.star_alignSJoverhangMin}",
            "--alignSJDBoverhangMin ${params.star_alignSJDBoverhangMin}",
            "--outFilterMismatchNmax ${params.star_outFilterMismatchNmax}",
            "--outFilterMatchNmin ${params.star_outFilterMatchNmin}",
            "--outFilterMatchNminOverLread ${params.star_outFilterMatchNminOverLread}",
            "--outFilterScoreMinOverLread ${params.star_outFilterScoreMinOverLread}",
            "--outSAMmapqUnique ${params.star_outSAMmapqUnique}",
            "--chimSegmentMin ${params.star_chimSegmentMin}",
            "--chimJunctionOverhangMin ${params.star_chimJunctionOverhangMin}",
            "--chimScoreJunctionNonGTAG ${params.star_chimScoreJunctionNonGTAG}",
            "--chimScoreMin ${params.star_chimScoreMin}",
            "--chimScoreDropMax ${params.star_chimScoreDropMax}",
            "--chimScoreSeparation ${params.star_chimScoreSeparation}",
            "${params.star_extra_args}"
        ].join(' ')
        publishDir = [
            path: { "${params.star_outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
}

// === SAMTOOLS ===
process {
    withName: 'SAMTOOLS_SORT' {
        label = 'samtools_process'
        publishDir = [ path: params.samtools_outdir, mode: 'copy' ]
    }
    withName: 'SAMTOOLS_STATS' {
        label = 'samtools_process'
        publishDir = [ path: params.samtools_stats_outdir, mode: 'copy' ]
    }
    withName: 'SAMTOOLS_FLAGSTAT' {
        label = 'samtools_process'
        publishDir = [ path: params.samtools_flagstat_outdir, mode: 'copy' ]
    }
    withName: 'SAMTOOLS_INDEX' {
        label = 'samtools_process'
        publishDir = [ path: params.samtools_idx_outdir, mode: 'copy' ]
    }
}

// === GATK Variant Calling ===
process {
    withName: 'GATK_HAPLOTYPECALLER' {
        label = 'gatk_process'
        publishDir = [ path: params.haplotype_caller_outdir, mode: 'copy' ]
    }
    withName: 'GATK_VARIANT_FILTER' {
        label = 'gatk_process'
        publishDir = [ path: params.variant_filter_outdir, mode: 'copy' ]
    }
    withName: 'GATK_VCF_SELECT_SNP' {
        label = 'gatk_process'
        publishDir = [ path: params.snp_select_outdir, mode: 'copy' ]
    }
    withName: 'GATK_VCF_SELECT_INDEL' {
        label = 'gatk_process'
        publishDir = [ path: params.indels_select_outdir, mode: 'copy' ]
    }
}

// === VCF2Table ===
process {
    withName: 'GATK_VCF_TO_TABLE' {
        label = 'gatk_process'
        publishDir = [ path: params.vcf2table_outdir, mode: 'copy' ]
    }
}

// === ANNOTATION ===
process {
    withName: 'SNPEFF_ANNOTATE' {
        label = 'snpeff_process'
        publishDir = [ path: params.annotate_outdir, mode: 'copy' ]
    }
    withName: 'ANNOTATE_VEP' {
        label = 'vep_process'
        ext.args = [
            params.vep_extra,
            params.vep_plugin_flags
        ].join(' ')
        publishDir = [
            path: { "${params.annotate_vep_outdir}/${meta.id}" },
            mode: params.publish_dir,
            pattern: "*.vep.*"
        ]
    }
}

// === MultiQC ===
process {
    withName: 'MULTIQC' {
        label = 'multiqc_process'
        publishDir = [ path: params.multiqc_quality_outdir, mode: 'copy' ]
    }
}

// === ARRIBA Fusion ===
process {
    withName: 'ARRIBA' {
        label = 'arriba_process'
        publishDir = [ path: params.arriba_outdir, mode: 'copy' ]
    }
    withName: 'ARRIBA_VISUALISATION' {
        label = 'arriba_vis_process'
        publishDir = [ path: params.visualisation_outdir, mode: 'copy' ]
    }
}

// === MAFTools ===
process {
    withName: 'VCF2MAF' {
        label = 'maftools_process'
        publishDir = [ path: params.maftools_outdir, mode: 'copy' ]
    }
    withName: 'MAF_VISUALISATION' {
        label = 'maftools_vis_process'
        publishDir = [ path: params.maftools_visual_outdir, mode: 'copy' ]
    }
}
